import json
import random
import os
import time
import main
from main import User as User
from main import clear_console as clear_console


class Project:
    def __init__(self, project_title, project_id, leader: User):
        self.__project_title = project_title
        self.__project_id = project_id
        self.leader_username = leader.username
        self.members = []
        self.tasks = []

    def get_project_title(self):
        return self.__project_title

    def get_project_id(self):
        return self.__project_id

    def to_dict_and_save_to_file(self, file_path):
        projects_dicts = load_projects_from_file(file_path)
        new_project_dict = {
            'project_title': self.__project_title,
            'project_id': self.__project_id,
            'leader': self.leader_username,
            'members': self.members
        }
        projects_dicts.append(new_project_dict)
        save_projects_to_file(file_path, projects_dicts)


def save_projects_to_file(file_path, project_dict):    # The project in the argument is an object
    with open(file_path, 'w') as file:
        json.dump(project_dict, file, indent=4)


def load_projects_from_file(file_path):    # Returns a dictionary
    try:
        with open(file_path, 'r') as file:
            projects_1 = json.load(file)
    except FileNotFoundError:
        print(f'File not found: {file_path}')
        projects_1 = []
    return projects_1


projects_file_path = 'projects.json'
projects_list = load_projects_from_file(projects_file_path)    # List of dictionaries


def create_a_project(leader: User):    # Returns an object of Project. It has to be saved!
    project_title = input('The title of your project: ')    # Needs to be checked in the projects file
    project_id = input('The ID of your project: ')    # Needs to be checked in the projects file
    is_unique = is_project_unique(projects_list, project_id)
    if not is_unique:
        print('This ID already exists for another project')
        print('Failed to create a new project!')
        clear_console(2)
        return None
    project_1 = Project(project_title, project_id, leader)
    clear_console(2)
    project_info_list = [project_title, project_id]
    leader.projects_as_leader.append(project_info_list)
    return project_1


def is_project_unique(projects_list_1: list[dict], new_project_id):
    for iterator in range(len(projects_list_1)):
        if projects_list_1[iterator]['project_id'] == new_project_id:
            return False
    return True


def show_list_of_projects(user_obj: User):
    pass
    projects_as_leader_list = user_obj.projects_as_leader
    projects_as_member_list = user_obj.projects_as_member

