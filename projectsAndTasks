import json
from main_1 import User as User
from main_1 import clear_console as clear_console


def pr_cyan(skk): print("\033[36m {}\033[00m" .format(skk))
def pr_green(skk): print("\033[32m {}\033[00m" .format(skk))
def pr_red(skk): print("\033[31m {}\033[00m" .format(skk))


class Project:
    def __init__(self, project_title, project_id, leader: User):
        self.__project_title = project_title
        self.__project_id = project_id
        self.leader_username = leader.username
        self.members = []
        self.tasks = []

    def get_project_title(self):
        return self.__project_title

    def get_project_id(self):
        return self.__project_id

    def to_dict_and_save_to_file(self, file_path, leader: User):
        projects_dicts = load_projects_from_file(file_path)    # List of dictionaries
        new_project_dict = {
            'project_title': self.__project_title,
            'project_id': self.__project_id,
            'leader': self.leader_username,
            'members': self.members
        }
        projects_dicts.append(new_project_dict)
        save_projects_to_file(file_path, projects_dicts)
        # Appending the new project to the object's projects_as_leader list
        leader.projects_as_leader.append(new_project_dict)
        # Save the new projects_as_leader list to 'user.json'
        with open("user.json", "r") as file:
            users_list = json.load(file)
            for iterate in range(len(users_list)):
                if users_list[iterate]['username'] == leader.username:
                    users_list[iterate]['projects_as_leader'] = leader.projects_as_leader

        save_projects_to_file('user.json', users_list)
        return leader


def save_projects_to_file(file_path, project_dict):
    with open(file_path, 'w') as file:
        json.dump(project_dict, file, indent=4)


def load_projects_from_file(file_path):    # Returns a list
    try:
        with open(file_path, 'r') as file:
            projects_1 = json.load(file)
    except FileNotFoundError:
        print(f'File not found: {file_path}')
        projects_1 = []
    return projects_1


projects_file_path = 'projects.json'
projects_list = load_projects_from_file(projects_file_path)   # List of dictionaries


def create_a_project(leader: User):    # Returns an object of Project. It has to be saved!
    project_title = input('The title of your project: ')    # Needs to be checked in the projects file
    project_id = input('The ID of your project: ')    # Needs to be checked in the projects file
    is_unique = is_project_unique(projects_list, project_id)
    if not is_unique:
        print('This ID already exists for another project.')
        print('Action failed!')
        clear_console(2)
        return 1
    project_1 = Project(project_title, project_id, leader)
    clear_console(2)
    return project_1


def is_project_unique(projects_list_1: list[dict], new_project_id):
    for iterator in range(len(projects_list_1)):
        if projects_list_1[iterator]['project_id'] == new_project_id:
            return False
    return True


def show_list_of_projects_and_choose(user_obj: User):    # If Back, returns 0; else returns a Project obj
    projects_as_leader_list = user_obj.projects_as_leader
    projects_as_member_list = user_obj.projects_as_member

    it_leader = len(projects_as_leader_list)
    it_member = len(projects_as_member_list)
    ch = -1
    it = 0
    while ch not in range(it_member + it_leader + 1):
        clear_console(2)
        print('0. Back')
        print('Your projects as the leader:')
        if it_leader > 0:
            for it in range(it_leader):
                pr_cyan(f'    {it + 1}. {projects_as_leader_list[it].get('project_title')}')
        else:
            print('    No projects as leader.')
        it = 0
        print('\nYour projects as a member:')
        if it_member > 0:
            for it in range(it_member):
                pr_cyan(f'    {it_leader + it + 1}. {projects_as_member_list[it].get('project_title')}')
        else:
            print('    No projects member.')

        try:
            ch = int(input('\nEnter your choice: '))
        except ValueError:
            clear_console(1)
            print('Error: Invalid value!')
            clear_console(2.5)

        else:
            if isinstance(ch, int) and (ch < 0 or ch > (it_leader + it_member)):
                print('Error: Invalid value!')
                clear_console(2)

            elif ch == 0:    # Going back
                clear_console(2)
                return 0

            elif it_leader > 0 and 1 <= ch <= it_leader:    # Valid choice: Choosing a project
                clear_console(2)
                return Project(projects_as_leader_list[ch - 1].get('project_title'),
                               projects_as_leader_list[ch - 1].get('project_id'), user_obj)

            elif it_member > 0 and it_leader < ch <= (it_member + it_leader):    # Valid choice: Choosing a project
                clear_console(2)
                return Project(projects_as_member_list[ch - 1].get('project_title'),
                               projects_as_member_list[ch - 1].get('project_id'), user_obj)


def options_for_my_project(user: User, my_project: Project):    # Called in the main program in the 2nd menu
    clear_console(2)
    ch = 0    # 1. Members  2. Tasks  3. Back
    while ch != 1 and ch != 2 and ch != 3:
        clear_console(1)
        pr_cyan(f'        {my_project.get_project_title()}')
        print('    1. Members\n    2. Tasks\n    3. Back')
        try:
            ch = int(input())
        except ValueError:
            print('Error: Invalid value!')
            clear_console(2)
        else:
            if isinstance(ch, int) and (ch < 1 or ch > 3):
                print('Error: Invalid value!')
                print('Enter a number between 1 and 3')
                clear_console(2)
            elif ch == 1:
                print("members' list and stuff.")#.members function
                ch = 0    # To show the same options again
            elif ch == 2:
                print("tasks' list and stuff.")#.tasks function(s)
                ch = 0    # To show the same options again
            elif ch == 3:
                print('3...') #.
                pass


def activate_users(users_list: [dict]):
    true_bool = True
    inactive_users = []
    for iterate in range(len(users_list)):
        if users_list[iterate]['is_active'] == true_bool:
            pass
        else:
            inactive_users.append(users_list[iterate])
    if len(inactive_users) == 0:
        print('    No inactive user.')
        print('    Going back...')
        clear_console(3)
        return
    else:
        which_user = 0
        while which_user < 1 or which_user > (len(inactive_users) + 1):
            clear_console(2)
            print('Choose a user to activate their account:')
            for iterate in range(len(inactive_users)):
                pr_cyan(f'{iterate + 1}. {inactive_users[iterate]['username']}')
            print(f' {len(inactive_users) + 1}. Back')
            try:
                which_user = int(input())
            except ValueError:
                pr_red('Error: Invalid value!')
                which_user = 0
            else:
                if isinstance(which_user, int) and 0 < which_user <= len(inactive_users):
                    this_username = inactive_users[which_user - 1]['username']
                    for iterate in range(len(users_list)):
                        if users_list[iterate]['username'] == this_username:
                            users_list[iterate]['is_active'] = true_bool

                    save_projects_to_file('user.json', users_list)
                    pr_green(f"{this_username}'s account has been activated.")
                    print('Going back...')
                    clear_console(3)

                elif isinstance(which_user, int) and which_user == len(inactive_users) + 1:
                    print('Going back...')
                    clear_console(2)

                else:
                    pr_red('Error: Invalid value!')
                    which_user = 0


def deactivate_users(users_list: [dict]):
    true_bool = True
    active_users = []
    for iterate in range(len(users_list)):
        if users_list[iterate]['is_active'] != true_bool:
            pass
        else:
            active_users.append(users_list[iterate])
    if len(active_users) == 0:
        print('    No active user.')
        print('    Going back...')
        clear_console(3)
        return
    else:
        which_user = 0
        while which_user < 1 or which_user > (len(active_users) + 1):
            clear_console(2)
            print('Choose a user to deactivate their account:')
            for iterate in range(len(active_users)):
                pr_cyan(f'{iterate + 1}. {active_users[iterate]['username']}')
            print(f' {len(active_users) + 1}. Back')
            try:
                which_user = int(input())
            except ValueError:
                pr_red('Error: Invalid value!')
                which_user = 0
            else:
                if isinstance(which_user, int) and 0 < which_user <= len(active_users):
                    this_username = active_users[which_user - 1]['username']
                    for iterate in range(len(users_list)):
                        if users_list[iterate]['username'] == this_username:
                            users_list[iterate]['is_active'] = False

                    save_projects_to_file('user.json', users_list)
                    pr_green(f"{this_username}'s account has been deactivated.")
                    print('Going back...')
                    clear_console(3)

                elif isinstance(which_user, int) and which_user == len(active_users) + 1:
                    print('Going back...')
                    clear_console(2)

                else:
                    pr_red('Error: Invalid value!')
                    which_user = 0
    
